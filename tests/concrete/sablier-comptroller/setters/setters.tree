Setters_Unit_Concrete_Test::disableAirdropsCustomFeeUSD
├── when caller not admin
│  ├── when caller with fee management role
│  │  ├── it should return the min USD fee
│  │  └── it should emit a {DisableAirdropsCustomFeeUSD} event
│  └── when caller without fee management role
│     └── it should revert
└── when caller admin
   ├── when not enabled
   │  ├── it should return the min USD fee
   │  └── it should emit a {DisableAirdropsCustomFeeUSD} event
   └── when enabled
      ├── it should return the min USD fee
      └── it should emit a {DisableAirdropsCustomFeeUSD} event

Setters_Unit_Concrete_Test::disableFlowCustomFeeUSD
├── when caller not admin
│  ├── when caller with fee management role
│  │  ├── it should return the min USD fee
│  │  └── it should emit a {DisableFlowCustomFeeUSD} event
│  └── when caller without fee management role
│     └── it should revert
└── when caller admin
   ├── when not enabled
   │  ├── it should return the min USD fee
   │  └── it should emit a {DisableFlowCustomFeeUSD} event
   └── when enabled
      ├── it should return the min USD fee
      └── it should emit a {DisableFlowCustomFeeUSD} event

Setters_Unit_Concrete_Test::disableLockupCustomFeeUSD
├── when caller not admin
│  ├── when caller with fee management role
│  │  ├── it should return the min USD fee
│  │  └── it should emit a {DisableLockupCustomFeeUSD} event
│  └── when caller without fee management role
│     └── it should revert
└── when caller admin
   ├── when not enabled
   │  ├── it should return the min USD fee
   │  └── it should emit a {DisableLockupCustomFeeUSD} event
   └── when enabled
      ├── it should return the min USD fee
      └── it should emit a {DisableLockupCustomFeeUSD} event

Setters_Unit_Concrete_Test::setAirdropsCustomFeeUSD
├── when caller not admin
│  ├── when caller with fee management role
│  │  ├── it should set the custom fee
│  │  └── it should emit a {SetAirdropsCustomFeeUSD} event
│  └── when caller without fee management role
│     └── it should revert
└── when caller admin
   ├── when new fee exceeds max fee
   │  └── it should revert
   └── when new fee not exceed max fee
      ├── when not enabled
      │  ├── it should set the custom fee
      │  └── it should emit a {SetAirdropsCustomFeeUSD} event
      └── when enabled
         ├── it should set the custom fee
         └── it should emit a {SetAirdropsCustomFeeUSD} event

Setters_Unit_Concrete_Test::setAirdropsMinFeeUSD
├── when caller not admin
│  ├── when caller with fee management role
│  │  ├── it should set the min fee
│  │  └── it should emit a {SetAirdropsMinFeeUSD} event
│  └── when caller without fee management role
│     └── it should revert
└── when caller admin
   ├── when new min fee exceeds max fee
   │  └── it should revert
   └── when new min fee not exceed max fee
      ├── it should set the min fee
      └── it should emit a {SetAirdropsMinFeeUSD} event

Setters_Unit_Concrete_Test::setFlowCustomFeeUSD
├── when caller not admin
│  ├── when caller with fee management role
│  │  ├── it should set the custom fee
│  │  └── it should emit a {SetFlowCustomFeeUSD} event
│  └── when caller without fee management role
│     └── it should revert
└── when caller admin
   ├── when new fee exceeds max fee
   │  └── it should revert
   └── when new fee not exceed max fee
      ├── when not enabled
      │  ├── it should set the custom fee
      │  └── it should emit a {SetFlowCustomFeeUSD} event
      └── when enabled
         ├── it should set the custom fee
         └── it should emit a {SetFlowCustomFeeUSD} event

Setters_Unit_Concrete_Test::setFlowMinFeeUSD
├── when caller not admin
│  ├── when caller with fee management role
│  │  ├── it should set the min fee
│  │  └── it should emit a {SetFlowMinFeeUSD} event
│  └── when caller without fee management role
│     └── it should revert
└── when caller admin
   ├── when new min fee exceeds max fee
   │  └── it should revert
   └── when new min fee not exceed max fee
      ├── it should set the min fee
      └── it should emit a {SetFlowMinFeeUSD} event

Setters_Unit_Concrete_Test::setLockupCustomFeeUSD
├── when caller not admin
│  ├── when caller with fee management role
│  │  ├── it should set the custom fee
│  │  └── it should emit a {SetLockupCustomFeeUSD} event
│  └── when caller without fee management role
│     └── it should revert
└── when caller admin
   ├── when new fee exceeds max fee
   │  └── it should revert
   └── when new fee not exceed max fee
      ├── when not enabled
      │  ├── it should set the custom fee
      │  └── it should emit a {SetLockupCustomFeeUSD} event
      └── when enabled
         ├── it should set the custom fee
         └── it should emit a {SetLockupCustomFeeUSD} event

Setters_Unit_Concrete_Test::setLockupMinFeeUSD
├── when caller not admin
│  ├── when caller with fee management role
│  │  ├── it should set the min fee
│  │  └── it should emit a {SetLockupMinFeeUSD} event
│  └── when caller without fee management role
│     └── it should revert
└── when caller admin
   ├── when new min fee exceeds max fee
   │  └── it should revert
   └── when new min fee not exceed max fee
      ├── it should set the min fee
      └── it should emit a {SetLockupMinFeeUSD} event

Setters_Unit_Concrete_Test::setOracle
├── when caller not admin
│  └── it should revert
└── when caller admin
   ├── when new oracle zero
   │  ├── it should set the oracle to zero
   │  └── it should emit a {SetOracle} event
   └── when new oracle not zero
      ├── when new oracle without implementation
      │  └── it should revert
      └── when new oracle with implementation
         ├── it should set the oracle
         └── it should emit a {SetOracle} event